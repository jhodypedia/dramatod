<div class="video-container">
  <video id="player" class="video-js vjs-big-play-centered" controls playsinline></video>
  <% if (settings.adsPlayerOverlayHtml) { %>
    <div class="ad-overlay" onclick="trackAdClick()">
      <%- settings.adsPlayerOverlayHtml %>
    </div>
  <% } %>
</div>

<div class="row">
  <h2>Pilih Episode</h2>
  <div class="scroll">
    <% (chapters || []).forEach(ch => { %>
      <div class="card <%= ch.index === index ? 'active' : '' %>" onclick="loadEpisode(<%= ch.index %>)">
        <img src="/img?url=<%= encodeURIComponent(ch.cover || ch.coverImg || ch.hCover || ch.hSmallCover || ch.verticalCover || ch.coverWap || '') %>&w=50"
             data-src="/img?url=<%= encodeURIComponent(ch.cover || ch.coverImg || ch.hCover || ch.hSmallCover || ch.verticalCover || ch.coverWap || '') %>"
             class="lazy blur" alt="ep"/>
        <div class="ep-badge">Ep <%= ch.index %></div>
      </div>
    <% }) %>
  </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/video.js@8/dist/video-js.min.css" rel="stylesheet"/>
<script src="https://cdn.jsdelivr.net/npm/video.js@8/dist/video.min.js"></script>
<script src="/public/js/lazyload.js"></script>

<script>
  const episodes = <%- JSON.stringify(chapters) %>;
  let currentIndex = <%= index %>;
  let player;

  function initPlayer(url) {
    if (player) player.dispose();
    player = videojs("player", { fluid: true, autoplay: true, preload: "auto" });
    player.src({ src: url, type: "application/x-mpegURL" });

    const Btn = videojs.getComponent('Button');
    class PrevBtn extends Btn { handleClick(){ loadEpisode(currentIndex - 1); } }
    class NextBtn extends Btn { handleClick(){ loadEpisode(currentIndex + 1); } }
    videojs.registerComponent('PrevBtn', PrevBtn);
    videojs.registerComponent('NextBtn', NextBtn);

    player.ready(() => {
      const bar = player.getChild('controlBar');
      if (currentIndex > 1) bar.addChild('PrevBtn', { controlText: 'Prev' }, bar.children().length - 1);
      if (currentIndex < episodes.length) bar.addChild('NextBtn', { controlText: 'Next' }, bar.children().length - 1);
    });

    player.on("ended", () => {
      if (currentIndex < episodes.length) loadEpisode(currentIndex + 1);
    });
  }

  function episodeUrl(i) {
    const ep = episodes.find(e => e.index === i);
    return ep?.cdnList?.[0]?.url || null;
  }

  function loadEpisode(i) {
    if (i < 1 || i > episodes.length) return;
    const url = episodeUrl(i);
    if (!url) return;
    currentIndex = i;
    initPlayer(url);
    history.replaceState({}, "", `/watch/<%= bookId %>/${i}`);
    window.scrollTo({ top: 0, behavior: 'smooth' });

    document.querySelectorAll(".row .card").forEach(c => c.classList.remove("active"));
    const activeCard = document.querySelector(`.row .card:nth-child(${i})`);
    if (activeCard) activeCard.classList.add("active");
  }

  function trackAdClick(){ fetch("/track/ad-click",{ method:"POST" }); }

  loadEpisode(currentIndex);
</script>

<style>
  .card.active { outline: 2px solid #e50914; }
  .ep-badge { background: rgba(0,0,0,.6); color:#fff; text-align:center; font-size:12px; }
</style>
